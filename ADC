/*USE P1.4 FOR MESAURING ADC*/

//variables
unsigned int my_ADC;
unsigned char print_ADC = 0;


//function prototypes
unsigned char read_AD_input(unsigned char);
void ADC_Init(void);


//my function
void ADC_printing
{
	/*USE P1.4 FOR MESAURING ADC*/
	if (print_ADC == 1)
	{
		my_ADC = read_AD_input(4);	//return ADC value at P1.4
		my_ADC *= 2400/256;		//convert to mV
		printf("ADC value: %c mV", my_ADC);
		print_ADC = 0;			//clear print flag
	}
}

unsigned char read_AD_input(unsigned char n) // Do not touch
{
	AMX1SL = n; /* Set P1.n as the analog input for ADC1 */
	ADC1CN = ADC1CN & ~0x20; /* Clear the “Conversion Completed” flag */
	ADC1CN = ADC1CN | 0x10; /* Initiate A/D conversion */
	while ((ADC1CN & 0x20) == 0x00); /* Wait for conversion to complete */
	return ADC1; /* Return digital value in ADC1 register */
}

void ADC_Init(void) //Do not touch
{
	REF0CN = 0x03; /* Set Vref to use internal reference voltage (2.4V) */
	ADC1CN = 0x80; /* Enable A/D converter (ADC1) */\
	ADC1CF |= 0x01; /* Set A/D converter gain to 1 */
}

/*ADD PRINT_ADC FLAG TO OVERFLOWS*/
{
	if (counts%5000 = 1) //if 1000ms = 1s pass (20ms/count)
	{
		print_ADC = 1;
	}
}
