/*  Names: Galilea Olvera,
    Section: 4
    Date: 3/22/2019
    File name: LAB 3-3 PART 1
*/

//-----------------------------------------------------------------------------
// Compiler Directives
//-----------------------------------------------------------------------------
#include <c8051_SDCC.h> //include files. This file is available online
#include <stdio.h>      //
#include <stdlib.h>     //
#include <i2c.h>        //

//-----------------------------------------------------------------------------
// Function Prototypes
//-----------------------------------------------------------------------------
void Port_Init(void);			// Initialize ports for input and output
void PCA_Init(void);			// Initialize PCA
void XBR0_Init(void);			// Initialize XBR0s
void PCA_ISR(void) __interrupt 9;	// Initialize Timer Interrupt Service 
void SMB_Init(void);
void Drive_Motor(void);
unsigned int Read_Ranger();
void ping(void);	

//-----------------------------------------------------------------------------
// Global Variables
//-----------------------------------------------------------------------------
__sbit __at 0xB7 SS; // Port3 Pin 7

unsigned int counts; //NOT USED IN RANGER 
unsigned char Data;

unsigned int light = 0;
unsigned int compass = 0;
int new_range = 0;
unsigned int r_compass = 0;
unsigned int r_light = 0;

int r_count = 0;
unsigned int range;
unsigned int r_ranger;
unsigned int print;
unsigned char input;
unsigned char addr = 0xE0;

//Part 1 Globals
unsigned int MOTOR_PW = 2028; 	//1.1ms
unsigned int MOTOR_MIN = 2028; 	//1.1ms
unsigned int MOTOR_MAX = 3502;	    //1.9ms
unsigned int MOTOR_NEUT = 2764;	//1.5ms
unsigned char cont;
unsigned char input_1;
unsigned int neutral_height = 900;
unsigned int error;
unsigned int temp_servo_pw;


 
//-----------------------------------------------------------------------------
// Main Function
//-----------------------------------------------------------------------------

void main(void)
{
	//declare local variables
    
	//initialize board
	Sys_Init();         // System Initialization
	Port_Init();        // Initialize Ports
	PCA_Init();         // Initialize PCA
	XBR0_Init();
	SMB_Init();
	putchar(' '); 


	//restore original PW
	//PCA0CPL2 = 0xFFFF - MOTOR_PW;
	//PCA0CPH2 = (0xFFFF - MOTOR_PW) >> 8;
	
    /*The steering gain must also be selectable. As with the heading, the entry is done using the
    keypad. Entry options include: 1) select from a menu, 2) increment or decrement using key
    strokes, or 3) key in a value. (Please only pick one option, not all.)*/
	PCA0CP2 = 0xFFFF - MOTOR_NEUT;
	while(1)
	{

		//make sure everything is off
		//printf("going into the loop");
		
		if (SS) //(!SS1 && !SS2 && !SS3)
		{
			printf("\r\nEVERYTHING OFF");
		}
		else if (!SS)
        {   
            print = 0;
	        r_count = 0;
	        r_ranger = 0;

            while(!SS)
            {
                if(r_ranger == 1) 
                {
                    set_speed();
                    range = Read_Ranger();
                    ping(); //return data
                    //READ LIGHT SENSOR!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                    Drive_Motor();
                    r_ranger = 0;
                }
            }
        }
	}
}

//-----------------------------------------------------------------------------
// Port_Init
//-----------------------------------------------------------------------------
void Port_Init(void)
{
    P1MDOUT |= 0x0F;    //Set output pin for CEX0, CEX2 and CEX3 in push-pull mode in port 1.0, 1.1, 1.3
    P2MDOUT |= 0x01;    //Set Port 2 bits 0 to output (0000 0001)
    
    P2MDOUT &= 0x1F;    //Set Port 2 bits 0-6 to input (000X XXXX)
    P2 |= ~0x1F;        //High impedance mode
}

//-----------------------------------------------------------------------------
// XBR0_Init
//-----------------------------------------------------------------------------
void XBR0_Init()
{
    XBR0 = 0x27;
}
//-------------------------------------------------------------------------
// PCA
//-------------------------------------------------------------------------

/*The steering servo and the speed controller must be updated every 20 ms. The PCA hardware
does this automatically as long as it is properly configured.*/

void PCA_Init(void) //do not touch
{
	PCA0CPM0 = PCA0CPM2 = PCA0CPM3 = 0xC2; //mode 0, 2, 3 in 16-bit compare mode
   
	PCA0CN = 0x40; //  Enable PCA counter
    
	PCA0MD = 0x81; //CF enabled, use SYSCLK/12
	
	EIE1 |= 0x08;		// enable PCA Interrupt request (by masking)
	EA = 1;			// enable global interrupts (by sbit)
}

void PCA_ISR ( void ) __interrupt 9
{
	if (CF)
	{	
		CF = 0;
		counts++;
		PCA0 = 28672; //PCA_start
		
		if(counts >= 4)
		{
			r_ranger = 1;
		}
	}	
	
    PCA0CN &= 0x40;	//handle other interrupts
}
/*********************************************/
void Drive_Motor(void)
{
    if(MOTOR_PW < MOTOR_MIN)
    {
        MOTOR_PW = MOTOR_MIN;
    }
	else if(0 <= range <= 80)
	{
        MOTOR_PW = MOTOR_MAX - ((range-10)*24); //increase proportionally
        LED = 0; //LED IS ON

        if (35 < range <= 45) //if object distance ~40cms
        {
            MOTOR_PW = MOTOR_PW; //no change
        }
    }
	else if (80 < range) 
	{
		MOTOR_PW = desired_heading; //as determined by compass
	}

    else if (MOTOR_PW > MOTOR_MAX)
    {
        MOTOR_PW = MOTOR_MAX;
    }

	PCA0CP2 = 0xFFFF - MOTOR_PW;
}
/********************************************************/
unsigned int Speed_Control(void)
{   //determined by POT analog value
    //my_ADC = ADC_printing(); call the ADC function
    if (my_ADC < 1200)
    {
        part = 0; //change speed PW
        Change_Pulsewidth(0,0);
        MOTOR_PW = MOTOR_MIN;
    }
    else if (my_ADC > 1200)
    {
        Change_Pulsewidth();
        MOTOR_PW = MOTOR_MAX;
    }
    else if (my_ADC == 1200)
    {
        MOTOR_PW = MOTOR_NEUT;
    }

    PCA0CP2 = 0xFFFF - MOTOR_PW;
}

/*********************************************************/
//The ranger needs 65 ms to complete the ping

void ping(void)
{
	unsigned int Data[1];
	unsigned char addr = 0xE0; 
	Data[0] = 0x51; // write 0x51 to reg 0 of the ranger:
	i2c_write_data(addr, 0, Data, 1);// write one byte of data to reg 0 at addr 
}

/*****************************/
unsigned int Read_Ranger()
{
	unsigned char Data[2];
	unsigned int range = 0;
	unsigned char addr=0xE0; // the address of the ranger is 0xE0

	i2c_read_data(addr, 2, Data, 2);
	
	range = (((unsigned int)Data[0] << 8) | Data[1]);
	
	return range;
}


//-------------------------------------------
// CHANGE_PULSEWIDTH
//-------------------------------------------
void Change_Pulsewidth(char part, int raw_val)

{	
	int error;
	unsigned int temp_servo;

    if(part == 0)
    {

    }

//Compass part
	int error;
	unsigned int temp_servo;

	if (part == 1)
	{	

		error = desired_heading - raw_val;
		temp_servo = ((1)*error + PW_CENTER);

		if ( error > 1800)
		{
			error -= 3600; // Fix value

		}
		else if ( error <- 1800)
		{
			error += 3600; // Fix value
		}		
		printf("error = %d \r\n",error);

		if ( temp_servo > PW_MAX )
		{
			temp_servo = PW_MAX;
		}

		if (temp_servo < PW_MIN)
		{
			temp_servo = PW_MIN;
		}

		PW = temp_servo;

		buf=0xFFFF-PW;
		printf("PW = %u \r\n",buf);


		PCA0CP0 = buf;

	    printf("PulseWidth= %u\n\rDesired_Heading= %u\n\rActual_Heading= %u\r\n", PW,desired_heading,raw_val);
	    
	}

	
