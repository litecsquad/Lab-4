#include <c8051_SDCC.h>
#include <stdio.h>
#include <stdlib.h>
#include <i2c.h>
//-----------------------------------------------------------------------------
// Function Prototypes
//-----------------------------------------------------------------------------
void Port_Init(void);
void PCA_Init (void);
void XBR0_Init();
void Change_Pulsewidth(char part, int raw_val);
void PCA_ISR ( void ) __interrupt 9;
void SMB_Init(void);
void ping (void);
unsigned int Compass();
void Ranger(void);
//unsigned char read_AD_input(unsigned char);
void ADC_Init(void);
void ping(void);
void ADC_printing(void);



//-----------------------------------------------------------------------------
// Global Variables
//-----------------------------------------------------------------------------

unsigned int comp = 0; //compass value
unsigned int r_ranger = 0; //flag to indiciate to read from ranger
unsigned int r_comp = 0; //flag to indiciate to read from compass
unsigned int r_light = 0; //flag to indiciate to read from light sensor
unsigned int PW;
unsigned int desired_heading = 900;
int counts = 0;
int Center_Servo = 2769;
int Max_Servo = 3899;
int Min_Servo =2069;
char wait;
unsigned char print_ADC = 0;
unsinged int Motor_PW;
unsigned int Servo_PW;

unsigned char new_heading = 0; // flag for count of compass timing
unsigned char new_range = 0; // flag for count of ranger timing
unsigned char print_flag = 0; // flag for count of printing
unsigned int heading;
unsigned int range;
unsigned int light;
int compass_adj = 0; // correction value from compass
int range_adj = 0; // correction value from ranger
unsigned char r_count; // overflow count for range
unsigned char h_count; // overflow count for heading
unsigned char print_count; // overflow count for printing
int error;

__sbit __at 0xB7 SS; //Port3 Pin 7 -- RUN/STOP

//-----------------------------------------------------------------------------
// Main Function
//-----------------------------------------------------------------------------
void main(void)
{	
    Sys_Init();
    putchar(' '); 
    Port_Init();
    XBR0_Init();
    PCA_Init();
    SMB_Init();
    ADC_printing();
	
		printf("Welcome to Lab 4!\r\n");

	i = 0;
	while (SS)
	{
		
		if (i == 0)
		{
			lcd_print("Pick a dseired heading for the servo\r\n");
			desired_servo = kpd_input(0);
			lcd_clear();
			lcd_print("Pick a gain for the servo\r\n");
			servo_gain = kpd_input(0);
			lcd_clear();
			lcd_print("Pick a gain for the ranger\r\n");
			ranger_gain = kpd_input(0);
			lcd_clear();
			i++;

		}
		//see ranger_steering 
		{
			
		
			Servo_PW = Center_Servo;
			comp = Compass();
			Change_Pulsewidth(1,comp);
			r_comp = 0;
		}
		if (r_ranger == 1)
		{
			range = Ranger();
			//write the rest, not sure
		}
		if (r_LCD == 1)
		{
			
			lcd_clear();
			lcd_print("Heading = %u    Range = %u \r\n Battery = %u\r\n", heading, range, my_ADC);
			r_LCD = 0;

		}
		printf("%u\n%u\n%u\n%u\n%u", counts, error, range, Motor_PW, Servo_PW)

	}



	
}
//-----------------------------------------------------------------------------
// Port_Init
//-----------------------------------------------------------------------------
//
// Set up ports for input and output
//
void Port_Init(void)
{
    P1MDOUT |= 0x0F;    //Set output pin for CEX0, CEX2 and CEX3 in push-pull mode in port 1.0, 1.1, 1.3
    P2MDOUT |= 0x01;    //Set Port 2 bits 0 to output (0000 0001)
    
    P2MDOUT &= 0x1F;    //Set Port 2 bits 0-6 to input (000X XXXX)
    P2 |= ~0x1F;        //High impedance mode
}

//-----------------------------------------------------------------------------
// XBR0_Init
//-----------------------------------------------------------------------------
//
// Set up the crossbar
//
void XBR0_Init()
{
    XBR0 = 0x27;  //configure with UART, SPI, SMBus and CEX channels

}

//-----------------------------------------------------------------------------
// PCA_Init
//-----------------------------------------------------------------------------
//
// Set up Programmable Counter Array
//
void PCA_Init(void) //do not touch
{
    PCA0CPM0 = PCA0CPM2 = PCA0CPM3 = 0xC2; //mode 0, 2, 3 in 16-bit compare mode
   
    PCA0CN = 0x40; //  Enable PCA counter
    
    PCA0MD = 0x81; //CF enabled, use SYSCLK/12
    
    EIE1 |= 0x08;       // enable PCA Interrupt request (by masking)
    EA = 1;         // enable global interrupts (by sbit)
}

//-----------------------------------------------------------------------------
// PCA_ISR
//----------------------------------------------------------------------------

// NEEDS TO BE CHANGED TO INVOLVE EVER PART
void PCA_ISR(void) __interrupt 9
{
	if (CF)
	 {
		//when theres an overflow	
		counts++;	//increment count	
		PCA0 = 28672; //rest to PCA Start
		CF = 0; //reset overflow flag
		
		//1 overflow = 20ms
		//every two overflows (~40ms), read from compass
		if((counts %2) == 0)
		{
			r_compass = 1;
		}
		//every 4 overflows (~80ms), read from light sensor and ultrasound ranger, increment print and reset count
		if((counts %4) == 0)
		{
			r_light = 1;
			r_ranger = 1;
			
		}	
		//every 20 overflows(~400 ms), output to lcd display and reset count
		if (counts % 20 == 0)
		{
			r_LCD = 1;
		}			
		if (counts%10000 = 0) //if 2000ms = 2s pass (20ms/count)
		{
			print_ADC = 1; //set print_ADC flag
		}
	 }
	PCA0CN &= 0xC0;
}


//----------------------------------------------------------------------------
// ADC
//----------------------------------------------------------------------------
void ADC_printing(void)
{
	/*USE P1.4 FOR MESAURING ADC
	oonce initialied, this function will print ADC in mV at every print_ADC flag*/
	if (print_ADC == 1)
	{
		my_ADC = read_AD_input(4);	//return ADC value at P1.4
		my_ADC *= 2400/256;		//convert to mV
		//lcd_print("Battery: %c mV", my_ADC);
		print_ADC = 0;			//clear print flag
	}
}

unsigned char read_AD_input(unsigned char n) // Do not touch
{
	AMX1SL = n; /* Set P1.n as the analog input for ADC1 */
	ADC1CN = ADC1CN & ~0x20; /* Clear the “Conversion Completed” flag */
	ADC1CN = ADC1CN | 0x10; /* Initiate A/D conversion */
	while ((ADC1CN & 0x20) == 0x00); /* Wait for conversion to complete */
	return ADC1; /* Return digital value in ADC1 register */
}

void ADC_Init(void) //Do not touch
{
	REF0CN = 0x03; /* Set Vref to use internal reference voltage (2.4V) */
	ADC1CN = 0x80; /* Enable A/D converter (ADC1) */\
	ADC1CF |= 0x01; /* Set A/D converter gain to 1 */
}


//-------------------------------------------
// CHANGE_PULSEWIDTH
//-------------------------------------------
void Change_Pulsewidth(char part, int raw_val)

{	
	int error;
	unsigned int temp_servo;

// Need to add all parts to this

//Compass part
	//int error;
	unsigned int temp_servo;

	if (part == 1)
	{	

		error = desired_heading - raw_val;
		temp_servo = ((1)*error + PW_CENTER);

		if ( error > 1800)
		{
			error -= 3600; // Fix value

		}
		else if ( error <- 1800)
		{
			error += 3600; // Fix value
		}		
		printf("error = %d \r\n",error);

		if ( temp_servo > PW_MAX )
		{
			temp_servo = PW_MAX;
		}

		if (temp_servo < PW_MIN)
		{
			temp_servo = PW_MIN;
		}

		PW = temp_servo;

		buf=0xFFFF-PW;
		printf("PW = %u \r\n",buf);


		PCA0CP0 = buf;

	    printf("PulseWidth= %u\n\rDesired_Heading= %u\n\rActual_Heading= %u\r\n", PW,desired_heading,raw_val);
	    
	}

//led part
	
}

/*********************************************/
void Drive_Motor(void)
{
    if(MOTOR_PW < MOTOR_MIN)
    {
        MOTOR_PW = MOTOR_MIN;
    }
	else if(0 <= range <= 80)
	{
        MOTOR_PW = MOTOR_MAX - ((range-10)*24); //increase proportionally
        LED = 0; //LED IS ON

        if (35 < range <= 45) //if object distance ~40cms
        {
            MOTOR_PW = MOTOR_PW; //no change
        }
    }
	else if (80 < range) 
	{
		MOTOR_PW = desired_heading; //as determined by compass
	}

    else if (MOTOR_PW > MOTOR_MAX)
    {
        MOTOR_PW = MOTOR_MAX;
    }

	PCA0CP2 = 0xFFFF - MOTOR_PW;
}



/*///////////////////////*/
unsigned int Compass()
{
	unsigned char addr = 0xC0; // the address of the sensor, 0xC0 for the compass
	unsigned char Data[2]; // an array with a length of 2
	unsigned int comp;
	i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2

	comp =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two data values into one value
								
	return comp;
}

unsigned int LightSensor()
{
	//Moved from Light Sensor code
}


/***********************************************/
/****************    RANGER     ****************/
/***********************************************/
unsigned int Read_Ranger()
{
	unsigned char Data[2];
	unsigned int range = 0;
	unsigned char addr=0xE0; // the address of the ranger is 0xE0

	i2c_read_data(addr, 2, Data, 2);
	
	range = (((unsigned int)Data[0] << 8) | Data[1]);
	
	return range;
}
/**********************************/

void ping(void)
{
	unsigned int Data[1];
	unsigned char addr = 0xC0; 
	Data[0] = 0x51; // write 0x51 to reg 0 of the ranger:
	i2c_write_data(addr, 0, Data, 1);// write one byte of data to reg 0 at addr 
}


void SMB_Init(void)
{
	 SMB0CR=0x93; /* set SCL to 100 kHz (actual freq ~ 94.594 kHz)*/
     ENSMB=1; /* bit 6 of SMB0CN, enable the SMBus */
}
